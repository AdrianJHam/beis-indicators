import * as _ from 'lamb';
import {
  arrayMin,
  arrayMax,
  makeArrayTransformer
} from '@svizzle/utils';

/* svizzle */

/**
 * Return the range within the provided limits, both limits being included
 *
 * @function
 * @arg {array} pair
 * @arg {number} [step=1]
 * @return {array}
 *
 * @example
inclusiveRange([2, 5]) = [2, 3, 4, 5];
inclusiveRange([2, 12]) = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
inclusiveRange([2, 12], 2) = [2, 4, 6, 8, 10, 12];
inclusiveRange([2, 11], 2) = [2, 4, 6, 8, 10];
 *
 * @version 0.7.0
 */
export const inclusiveRange = (extent, step = 1) => {
  const range = _.range(...extent, step);

  return _.last(range) + step > extent[1]
    ? range
    : _.appendTo(range, extent[1]);
}

/* domain */

export const getYearExtent = _.pipe([
  _.pluckKey('indicators'),
  _.flatten,
  _.pluckKey('year_range'),
  _.transpose,
  makeArrayTransformer([arrayMin, arrayMax]),
]);

export const makeIndicatorsLookup = _.pipe([
  _.pluckKey('indicators'),
  _.flatten,
  _.indexBy(_.getPath('schema.value.id')),
]);
